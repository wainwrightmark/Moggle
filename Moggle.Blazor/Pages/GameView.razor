@using Fluxor
@using MoreLinq.Extensions
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDialogService Dialog


<svg viewBox="0 0 @FullWidth @FullHeight" class="moggleSVG">

  <rect x="0" y="0" width="@FullWidth" height="@FullHeight" fill="@Colors.Shades.White"/>
  @if (State.Value.ChosenPositions.Any())
  {
    <g>
      @{
        var index = 0;
        @foreach (var ((r1, c1), (r2, c2)) in State.Value.ChosenPositions
          .Pairwise((a, b) => (a, b)))
        {
          var x1 = c1 * SquareSize + SquareSize * 0.5;
          var y1 = r1 * SquareSize + SquareSize * 0.5;
          var x2 = c2 * SquareSize + SquareSize * 0.5;
          var y2 = r2 * SquareSize + SquareSize * 0.5;

          <line id="@($"line-{index}")" x1="@x1" x2="@x2" y1="@y1" y2="@y2"
                stroke-width="@(LineWidth)"
                stroke="@Colors.Green.Default"
                style="transition: 2s ease-out">
          </line>
          index++;
        }

        <line id="@($"line-{index}")"
                stroke-width="@(LineWidth)"
                stroke="@Colors.Green.Default"
                style="opacity: 0;  transition: 2s ease-out">
          </line>
      }


      _svgHelper1.Cmd_Render(g1, 0, builder);
    </g>
  }


  @foreach (var coordinate in State.Value.Board.GetAllCoordinates())
  {
    var rotated = coordinate.Rotate(State.Value.Board.MaxCoordinate, -State.Value.Rotation);
    var color = GetColor(rotated);

    var cx = rotated.Column * SquareSize
             + SquareSize * 0.5;

    var cy = rotated.Row * SquareSize
             + SquareSize * 0.5;

    <g
      style="transform: translate(@(cx)px, @(cy)px); transition: 2s ease-out;"

      @onclick="@(() => CellClicked(rotated))">
      <circle

        id="@($"{coordinate}_bigCircle")"

        fill="@color"
        r="@CircleRadius"
        style="transition: fill 2s ease-out"

        stroke-width="@CircleStrokeWidth"
        stroke="@Colors.BlueGrey.Default">
      </circle>

      <text
        id="@($"{coordinate}_text")"

        dominant-baseline="middle"
        text-anchor="middle"
        fill="@Colors.Shades.Black">
        @State.Value.Board.GetLetterAtCoordinate(coordinate).ButtonText

      </text>
    </g>
  }



</svg>


<MudChip Icon="@Filled.MilitaryTech">@State.Value.Score</MudChip>
<MudChip Icon="@Filled.Notes">@(State.Value.NumberOfWords)</MudChip>


<MudList>

  @if (State.Value.CheatWords != null)
  {
    @foreach (var w in State.Value.CheatWords)
    {
      <MudChip Label="true">@w.Display</MudChip>
    }
  }
  else
  {
    @foreach (var w in State.Value.FoundWords)
    {
      var word = w;
      <MudCheckBox
        Disabled="@(IsGameInProgress)"
        CheckedChanged="(bool b) => { Dispatcher.Dispatch(new EnableWord(word, b)); }"
        Label=@word.Display
        Checked="@(!State.Value.DisabledWords.Contains(word))"/>
    }
  }
</MudList>

@if (State.Value.CheatWords == null && AllowCheating)
{
  <MudButton OnClick="() => Dispatcher.Dispatch(new CheatAction())">Cheat</MudButton>
}


@code {

  [Inject]
  private IState<MoggleState> State { get; set; }

  [Inject]
  public IDispatcher Dispatcher { get; set; }

  public bool AllowCheating => State.Value.LastSettings.ContainsKey("cheat");

  [Parameter]
  public StartGameAction? StartGameAction { get; set; }

  /// <inheritdoc />
  protected override void OnParametersSet()
  {
    if (StartGameAction != null)
      Dispatcher.Dispatch(StartGameAction);

    base.OnParametersSet();
  }

  public bool IsGameInProgress => !State.Value.TimeSituation.IsFinished;

  public string GetColor(Coordinate coordinate)
  {
    if (!IsGameInProgress || !State.Value.ChosenPositions.Any())
      return Colors.Grey.Default;

    var result = State.Value.TryGetMoveResult(coordinate);

    var color = result switch
    {
      MoveResult.IllegalMove   => Colors.Grey.Default,
      MoveResult.InvalidWord   => Colors.Grey.Darken1,
      MoveResult.MoveRetraced  => Colors.Green.Lighten3,
      MoveResult.TimeElapsed   => Colors.Grey.Default,
      MoveResult.WordAbandoned => Colors.Green.Lighten5,
      MoveResult.WordComplete  => Colors.Green.Darken2,
      MoveResult.WordContinued => Colors.Green.Default,
      _                        => throw new ArgumentOutOfRangeException(nameof(result))
      };

    return color;
  }

  public double CircleRadius => FullWidth / Math.Max(Columns, Rows) * 0.325;
  public double SquareSize => FullWidth / Math.Max(Columns, Rows);

    public const double FullWidth = 360;
    public const double FullHeight = 360;

  public double LineWidth => FullWidth * 0.05;
  public double CircleStrokeWidth => FullWidth * 0.01;

  public int Columns => State.Value.Board.Columns;
  public int Rows => State.Value.Board.Rows;

  public void CellClicked(Coordinate coordinate)
  {
    Dispatcher.Dispatch(new ChooseCellAction(coordinate));
  }

}

<style>

  .moggleSVG {
    font-family: monospace;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    cursor: default;
    font-size: @(144 / Math.Max(Columns, Rows))px;
    width: 100%;
    font-weight: bold;
  }
</style>
