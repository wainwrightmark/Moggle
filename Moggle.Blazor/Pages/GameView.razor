@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDialogService Dialog

<div class="box">
  @for (var row = 0; row < State.Value.Board.Height; row++)
  {
    var r = row;
    <div>
      @for (var col = 0; col < State.Value.Board.Width; col++)
      {
        var coordinate = new Coordinate(r, col);

        var (color, disabled) = GetColor(coordinate);

        <button On></button>

        <MudButton
          @key="@coordinate"
           Size="Size.Small"
           Variant="Variant.Filled"
           Class="square"
           Color="@color"
           Style="transition: background-color 1s"
           Disabled="@disabled"

           OnClick="() => Dispatcher.Dispatch(new ChooseCellAction(coordinate))">
          @(State.Value.GetLetterAtCoordinate(coordinate).ButtonText)
        </MudButton>
      }
    </div>
  }
</div>

<MudChip Icon="@Filled.MilitaryTech">@State.Value.Score</MudChip>
<MudChip Icon="@Filled.Notes">@(State.Value.NumberOfWords)</MudChip>


<MudList>

  @if (State.Value.CheatWords != null)
  {
    @foreach (var w in State.Value.CheatWords)
    {
      <MudChip Label="true">@w</MudChip>
    }
  }
  else
  {
    @foreach (var w in State.Value.FoundWords)
    {
      var word = w;
      <MudCheckBox
        Disabled="@(IsGameInProgress)"
        CheckedChanged="(bool b) => { Dispatcher.Dispatch(new EnableWord(word, b)); }"
        Label=@word.Display
        Checked="@(!State.Value.DisabledWords.Contains(word))"/>
    }
  }
</MudList>

@if (State.Value.CheatWords == null && AllowCheating)
{
  <MudButton OnClick="() => Dispatcher.Dispatch(new CheatAction())">Cheat</MudButton>
}


@code {

  [Inject]
  private IState<MoggleState> State { get; set; }

  [Inject]
  public IDispatcher Dispatcher { get; set; }

  [Parameter]
  public bool AllowCheating { get; set; }

  [Parameter]
  public StartGameAction? StartGameAction { get; set; }

  /// <inheritdoc />
  protected override void OnParametersSet()
  {
    if (StartGameAction != null)
      Dispatcher.Dispatch(StartGameAction);

    base.OnParametersSet();
  }

  public bool IsGameInProgress => !State.Value.TimeSituation.IsFinished;

  public (Color Color, bool Disabled) GetColor(Coordinate coordinate)
  {
    if (!IsGameInProgress || !State.Value.ChosenPositions.Any())
      return (Color.Default, false);

    var moveResult = State.Value.TryGetMoveResult(coordinate);

    return moveResult switch
    {
      MoveResult.IllegalMove      => (Color.Dark, true),
      MoveResult.InvalidWord      => (Color.Secondary, true),
      MoveResult.MoveRetraced    => (Color.Tertiary, false),
      MoveResult.TimeElapsed      => (Color.Dark, true),
      MoveResult.WordAbandoned  => (Color.Tertiary, false),
      MoveResult.WordComplete    => (Color.Primary, false),
      MoveResult.WordContinued  => (Color.Success, false),
      _ => throw new ArgumentOutOfRangeException(nameof(moveResult))
      };
  }

}

<style>

  .box { display: block }

  .cell {
    top: calc(90vmin / @State.Value.MaxDimension);
    right: calc(90vmin / @State.Value.MaxDimension);
  }

  .square {

    position: relative;
    width: calc(100% / @State.Value.MaxDimension);
    height: calc(100% / @State.Value.MaxDimension);
    font-family: monospace;
    font-size: 8px;
    font-size: calc(30vmin / @State.Value.MaxDimension);
    min-width: 8px;
    min-height: 8px;
    transition: top 2s, left 2s;
  }
</style>
