@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDialogService Dialog

<div class="box">
  @for (var row = 0; row < State.Value.Board.Height; row++)
  {
    var r = row;
    <div>
      @for (var col = 0; col < State.Value.Board.Width; col++)
      {
        var coordinate = new Coordinate(r, col);
        <MudButton
            Size="Size.Small"
            Class="square"
            Color="@GetColor(coordinate)"
            Disabled="@(!State.Value.IsMoveLegal(coordinate))"
            OnClick="() => Dispatcher.Dispatch(new ChooseCellAction(coordinate))">
          @(State.Value.GetLetterAtCoordinate(coordinate).ToString())
          @*@coordinate*@
          </MudButton>
      }
    </div>

  }
</div>

<MudText Typo="Typo.h1">
  @State.Value.Score
</MudText>

<MudList>
  @foreach (var w in State.Value.FoundWords)
  {
    var word = w;
    <MudCheckBox
      Disabled="@(IsGameVisible)"
      CheckedChanged="(bool b) => { Dispatcher.Dispatch(new EnableWord(word, b)); }"
      Label=@word
      Checked="@(!State.Value.DisabledWords.Contains(word))"/>
  }
</MudList>

@code {

  [Inject]
  private IState<MoggleState> State { get; set; }

  [Inject]
  public IDispatcher Dispatcher { get; set; }

  public bool IsGameVisible => State.Value.FinishTime.HasValue;

  public Color GetColor(Coordinate coordinate)
  {
    if (!IsGameVisible || !State.Value.ChosenPositions.Any())
      return Color.Default;

    if (State.Value.ChosenPositions.Last() == coordinate)
      return Color.Primary;
    else if (State.Value.ChosenPositions.Contains(coordinate))
      return Color.Secondary;
    else if (State.Value.IsMoveLegal(coordinate))
      return Color.Success;
    else
      return Color.Dark;
  }

}

<style>

  .box {
    display:block
  }

  .cell {
    top: calc(90vmin / @State.Value.MaxDimension);
    right: calc(90vmin / @State.Value.MaxDimension);
  }

  .square {

    position: relative;
    width: calc(100% / @State.Value.MaxDimension);
    height: calc(100% / @State.Value.MaxDimension);
    font-family: monospace;
    font-size: 8px;
    font-size: calc(30vmin / @State.Value.MaxDimension);
    min-width: 8px;
    min-height: 8px;
    transition: top 2s, left 2s;
  }
</style>
