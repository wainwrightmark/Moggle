@using System.Threading
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDialogService Dialog
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<MudFab Color="Color.Secondary" Icon="@Filled.RotateLeft" OnClick="() => Dispatcher.Dispatch(new RotateAction(false))"/>

<MudAppBarSpacer/>

@if (SecondsLeft.HasValue)
{
  <MudText Typo="Typo.h5">@SecondsLeft</MudText>
  <MudAppBarSpacer/>
}
<MudAppBarSpacer/>

<MudFab Color="Color.Primary" OnClick="OpenDialog" Size="Size.Large" Label="New Game"/>
<MudAppBarSpacer/>
<MudFab Color="Color.Secondary" Icon="@Filled.RotateRight" OnClick="() => Dispatcher.Dispatch(new RotateAction(true))"/>
<MudAppBarSpacer/>
<MudIconButton
  Icon="@Brands.GitHub"
  Color="Color.Inherit"
  Edge="Edge.End"
  Link="https://github.com/wainwrightmark/Moggle"
  Target="_blank"/>

@code {

  [Inject]
  private IState<MoggleState> State { get; set; }

  [Inject]
  public IDispatcher Dispatcher { get; set; }

  public bool IsGameVisible => SecondsLeft > 0;

  private Timer _timer;

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      _timer = new Timer(DateTimeCallback, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }
  }

  private async void DateTimeCallback(object state)
  {
    await InvokeAsync(StateHasChanged);
  }

  private async Task OpenDialog()
  {
    var parameters = new DialogParameters
    {
      { nameof(StartDialog.SetValues), State.Value.LastSettings.ToDictionary(x => x.Key, x => x.Value) },
      { nameof(StartDialog.GameModeName), State.Value.LastGameMode.Name }
    };

    var d = Dialog.Show<StartDialog>("Start Game", parameters);

    var r = await d.Result;

    if (r.Cancelled)
      return;

    if (r.Data is StartDialog.StartDialogResult startDialogResult)
    {
      var gameString = Moggle.SavedGame.CreateGameString(startDialogResult.Mode, startDialogResult.Settings);
      var savedGame = await localStorage.GetItemAsync<Moggle.SavedGame>(gameString);


      var uri = NavManager.BaseUri + $"?{gameString}";

      var sga = new StartGameAction(WordList.LazyInstance, startDialogResult.Mode, startDialogResult.Settings, savedGame);
      NavManager.NavigateTo(uri);

      Dispatcher.Dispatch(sga);
    }
  }

  public int? SecondsLeft
  {
    get
    {
      if (State.Value.TimeSituation is TimeSituation.FinishAt finishAt)
      {
        var r = Convert.ToInt32(finishAt.DateTime.Subtract(DateTime.Now).TotalSeconds);
        return Math.Max(0, r);
      }
      return null;
    }
  }

}
