@page "/"
@using System.Collections.Immutable
@inject NavigationManager NavigationManager
@using Moggle.Blazor.Pages
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<GameView StartGameAction="_startGameAction"/>


@code
{

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

    var parseDict = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

    if (parseDict.TryGetValue("mode", out var modeString) && AllGameModes.Modes.TryGetValue(modeString, out var mode))
    {
      var dict2 = parseDict.ToImmutableDictionary(x => x.Key, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase);

      var gameKey = Moggle.SavedGame.CreateGameString(mode, dict2);

      var savedGame = await localStorage.GetItemAsync<Moggle.SavedGame>(gameKey);

      _startGameAction = new StartGameAction(WordList.LazyInstance, mode, dict2, savedGame);
    }

    await base.OnParametersSetAsync();
  }

  private StartGameAction? _startGameAction = null;
}
