@page "/"
@using System.Collections.Immutable
@using Moggle.Actions
@inject NavigationManager NavigationManager

<GameView StartGameAction="_startGameAction"/>

@code
{

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

    var parseDict = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

    if (parseDict.TryGetValue("mode", out var modeString) && AllGameModes.Modes.TryGetValue(modeString, out var mode))
    {
      var dict2 = parseDict.ToImmutableDictionary(x => x.Key, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase);

      _startGameAction = new StartGameAction(WordList.LazyInstance, mode, dict2);
    }
    else
    {
      _startGameAction = new StartGameAction(WordList.LazyInstance, Moggle.AllGameModes.Modes.Values.First(), ImmutableDictionary<string, string>.Empty);
    }

    await base.OnParametersSetAsync();
  }

  private StartGameAction? _startGameAction = null;
}
