@using System.Threading
@using Fluxor
@using Moggle.Actions
@using Moggle.States
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDialogService Dialog




@if (SecondsLeft.HasValue)
{
  <MudText Typo="Typo.h5">@SecondsLeft</MudText>
  <MudAppBarSpacer/>
}
<MudAppBarSpacer/>

<MudFab Color="Color.Primary" OnClick="OpenDialog" Size="Size.Large" Label="New Game"/>
<MudAppBarSpacer/>

<MudIconButton
  Icon="@Icons.Material.Filled.Face"
  Color="Color.Inherit"
  Edge="Edge.End" OnClick="ToggleCheating">
</MudIconButton>

<MudIconButton
  Icon="@Icons.Custom.Brands.GitHub"
  Color="Color.Inherit"
  Edge="Edge.End"
  Link="https://github.com/wainwrightmark/Moggle"
  Target="_blank"/>

@code {

    [Inject]private IState<MoggleBoard> Board { get; set; }
    [Inject]private IState<ChosenPositionsState> ChosenPositions { get; set; }
    [Inject]private IState<Solver> Solver { get; set; }
    [Inject]private IState<FoundWordsState> FoundWords { get; set; }

    [Inject]
    private IState<GameSettingsState> GameSettingsState { get; set; }

    [Inject]
    private IState<AnimationState> AnimationState { get; set; }

    [Inject]
    private IState<TimeState> TimeState { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    public bool IsGameVisible => SecondsLeft > 0;

    private Timer _timer;

    protected override void OnAfterRender(bool firstRender)
    {
      if (firstRender)
      {
        _timer = new Timer(DateTimeCallback, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
      }
    }

    private async void DateTimeCallback(object state)
    {
      if (AnimationState.Value.Animation != null)
        Dispatcher.Dispatch(new AnimateAction(
                              Board.Value.UniqueKey,
                              AnimationState.Value.Animation.GetStepWithResult(ChosenPositions.Value, Board.Value, Solver.Value, FoundWords.Value, AnimationState.Value.AnimationFrame)));

      await InvokeAsync(StateHasChanged);
    }

    private async Task OpenDialog()
    {
      var parameters = new DialogParameters
    {
      { nameof(StartDialog.SetValues), GameSettingsState.Value.LastSettings.ToDictionary(x => x.Key, x => x.Value) },
      { nameof(StartDialog.GameModeName), GameSettingsState.Value.LastGameMode.Name }
    };

      var d = Dialog.Show<StartDialog>("Start Game", parameters);

      var r = await d.Result;

      if (r.Cancelled)
        return;

      if (r.Data is StartDialog.StartDialogResult startDialogResult)
      {
        var sga = new StartGameAction(WordList.LazyInstance, startDialogResult.Mode, startDialogResult.Settings);
        Dispatcher.Dispatch(sga);
      }
    }

    public int? SecondsLeft
    {
      get
      {
        if (TimeState.Value.TimeSituation is TimeSituation.FinishAt finishAt)
        {
          var r = Convert.ToInt32(finishAt.DateTime.Subtract(DateTime.Now).TotalSeconds);
          return Math.Max(0, r);
        }
        return null;
      }
    }

    public void ToggleCheating()
    {
      Dispatcher.Dispatch(new EnableCheatingAction());
    }

}
