@using System.Collections.Immutable
<MudDialog>
  <DialogActions>
    <MudButton OnClick="Cancel">Cancel</MudButton>
    <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
  </DialogActions>
  <DialogContent>
    <MudContainer Style="max-height: 200px; overflow-y: scroll">
      <MudSelect @bind-Value="GameModeName">
        @foreach (var gm in AllGameModes.Modes.Keys)
        {
          <MudSelectItem Value="@gm"/>
        }
      </MudSelect>

      @foreach (var setting in GameMode.Settings.Append(Duration))
      {
        <SettingBox @key="@setting.Name" Values="@SetValues" Setting="@setting"/>
      }
    </MudContainer>
  </DialogContent>

</MudDialog>

@code {

  [CascadingParameter]
  MudDialogInstance MudDialog { get; set; }

  public string GameModeName { get; set; } = ModernGameMode.Instance.Name;

  public IMoggleGameMode GameMode => AllGameModes.CreateFromString(GameModeName)!;

  public Dictionary<string, string> SetValues { get; set; } = new();


  void Submit()
  {

    var duration = Duration.Get(SetValues);

    var action = new StartGameAction(WordList.LazyInstance.Value, GameMode, SetValues.ToImmutableDictionary(), duration);

    MudDialog.Close(DialogResult.Ok(action));
  }

  private static readonly Setting.Integer Duration = new (nameof(Duration), 1, int.MaxValue, 120, 10);

  void Cancel() => MudDialog.Cancel();


}
