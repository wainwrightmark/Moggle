@using Moggle.States
@using Moggle.Actions
@using Fluxor
@using System.Collections.Immutable
@inherits Fluxor.Blazor.Web.Components.FluxorComponent


@if (FoundWordsState.Value.Data is FoundWordsData.TargetWordsData data)
{
  <MudTabs>
    @foreach (var group in data.WordsToFind.GroupBy(x => x.Value.group).OrderBy(x => x.Key.Order))
    {
      var groupKey = @group.Key;
      var remainingInGroup = group.Count(x => x.Value.word is null);

      <MudTabPanel @key="@groupKey.Display" Text="@groupKey.Display" BadgeData="@remainingInGroup">

        @foreach (var w in group.OrderBy(x => x.Key))
        {
          var key = $"CheckBox{@w.Key}";

          var icon = w.Value.word is not null ? Icons.Filled.CheckCircle : Icons.Filled.Circle;

          <MudChip @key="@key" Disabled="@(w.Value.word is null)" OnClick="() => SelectFoundWord(w.Value.word)" Label="true" Icon="@icon">
            @w.Key.PadLeft(3)
          </MudChip>
        }

      </MudTabPanel>
    }
  </MudTabs>
}
else if (FoundWordsState.Value.Data is FoundWordsData.OpenSearchData openSearchData)
{
  <MudChip Icon="@Icons.Filled.MilitaryTech">@openSearchData.GetScore()</MudChip>
  <MudChip Icon="@Icons.Filled.Notes">@openSearchData.GetNumberOfWords()</MudChip>

  <MudList>

    @if (CheatState.Value.Revealed)
    {
      @foreach (var w in CheatState.Value.PossibleWords)
      {
        <MudChip OnClick="() => SelectFoundWord(w)" Label="true">@w.Display</MudChip>
      }
    }
    else
    {
      @foreach (var w in openSearchData.FoundWordsDictionary)
      {
        <MudCheckBox
          @onclick="() => SelectFoundWord(w.Key)"
           Disabled="@(IsGameInProgress)"
           CheckedChanged="(bool b) => { Dispatcher.Dispatch(new EnableDisableWordAction(w.Key, b)); }"
           Label=@w.Key.Display
           Checked="@(w.Value)"/>
      }
    }
  </MudList>
}

@if (CheatState.Value.AllowCheating && !CheatState.Value.Revealed)
{
  <MudButton OnClick="() => Dispatcher.Dispatch(new CheatAction())">Cheat</MudButton>
}

@code {

  [Inject]
  private IState<FoundWordsState> FoundWordsState { get; set; }

  [Inject]
  private IState<CheatState> CheatState { get; set; }

  [Inject]
  public IDispatcher Dispatcher { get; set; }

  [Inject]
  private IState<TimeState> TimeState { get; set; }

  [Inject]
  private IState<ChosenPositionsState> ChosenPositions { get; set; }

  public bool IsGameInProgress => !TimeState.Value.TimeSituation.IsFinished;

  public void SelectFoundWord(FoundWord? foundWord)
  {
    if (foundWord is not null && !ChosenPositions.Value.ChosenPositions.SequenceEqual(foundWord.Path))
      Dispatcher.Dispatch(new SetPositionsAction(foundWord.Path));
    else
    {
      Dispatcher.Dispatch(new SetPositionsAction(ImmutableList<Coordinate>.Empty));
    }
  }

}
