@using Fluxor
@using System.Collections.Immutable
@using Myriad.Actions
@using Myriad.States
@inherits Fluxor.Blazor.Web.Components.FluxorComponent


@if (FoundWordsState.Value.Data is FoundWordsData.TargetWordsData data)
{
  var groups = data.WordsToFind.GroupBy(x => x.Value.group).OrderBy(x => x.Key.Order).ToList();

  if (false && groups.Count == 1)
  {
    var group = groups.Single();
    @foreach (var w in group.OrderBy(x => x.Key))
    {
      var key = $"CheckBox{@w.Key}";

      var text = (group.Key.HideText && w.Value.word is null ?
        new string('?', w.Key.Length) : w.Key).PadLeft(3);

      var icon = w.Value.word is not null ? Icons.Filled.CheckCircle : Icons.Filled.Circle;

      <MudChip @key="@key"
                Disabled="@(w.Value.word is null)"
                OnClick="() => SelectFoundWord(w.Value.word)"
                Label="true"
                Icon="@icon">
        @text
      </MudChip>
    }
  }
  else
  {
    @code
    {
        MudTabs tabs;

        //void TabInit()
        //{
        //  if(tabs.ac .ActivePanelIndex < 0)
        //    tabs.ActivatePanel(0);
        //}

    }

    <MudTabs @ref="tabs" ActivePanelIndex="0">
      @foreach (var group in groups)
      {
        var groupKey = @group.Key;
        var remainingInGroup = group.Count(x => x.Value.word is null);

        <MudTabPanel @key="@groupKey.Display" Text="@groupKey.Display" BadgeData="@remainingInGroup">

          @foreach (var w in group.OrderBy(x => x.Key))
          {
            var key = $"CheckBox{@w.Key}";

            var text = (group.Key.HideText && w.Value.word is null ?
              new string('?', w.Key.Length) : w.Key).PadLeft(3);

            var icon = w.Value.word is not null ? Icons.Filled.CheckCircle : Icons.Filled.Circle;

            <MudChip @key="@key"
                      Disabled="@(w.Value.word is null)"
                      OnClick="() => SelectFoundWord(w.Value.word)"
                      Label="true"
                      Icon="@icon">
              @text
            </MudChip>
          }

        </MudTabPanel>
      }
    </MudTabs>
  }
  }
else if (FoundWordsState.Value.Data is FoundWordsData.OpenSearchData openSearchData)
{
  <MudChip Icon="@Icons.Filled.MilitaryTech">@openSearchData.GetScore()</MudChip>
  <MudChip Icon="@Icons.Filled.Notes">@openSearchData.GetNumberOfWords()</MudChip>

  <MudList>


    @foreach (var w in openSearchData.FoundWordsDictionary)
    {
      var icon = w.Value ? Icons.Filled.CheckCircle : Icons.Filled.Circle;

      @code
      {
        void Flip(KeyValuePair<FoundWord, bool> w)
        {
          Dispatcher.Dispatch(new EnableDisableWordAction(w.Key, !w.Value));
        }

        void ChipClicked(MouseEventArgs args, KeyValuePair<FoundWord, bool> w)
        {
          if (args.Detail > 1)
            Flip(w);

          SelectFoundWord(w.Key);
        }
      }

      <MudChip

        @onclick="(args) => ChipClicked(args, w)"
         Label="true"
         Icon="@icon">
        @w.Key.Display
      </MudChip>
    }

  </MudList>
}

@if (CheatState.Value.AllowCheating && !CheatState.Value.Revealed)
{
  <MudButton OnClick="() => Dispatcher.Dispatch(new CheatAction(Solver.Value, Board.Value))">Cheat</MudButton>
}

@code {

  [Inject]
  private IState<Board> Board { get; set; }

  [Inject]
  private IState<Solver> Solver { get; set; }

  [Inject]
  private IState<FoundWordsState> FoundWordsState { get; set; }

  [Inject]
  private IState<CheatState> CheatState { get; set; }

  [Inject]
  public IDispatcher Dispatcher { get; set; }

  [Inject]
  private IState<TimeState> TimeState { get; set; }

  [Inject]
  private IState<ChosenPositionsState> ChosenPositions { get; set; }

  public bool IsGameInProgress => !TimeState.Value.TimeSituation.IsFinished;

  public void SelectFoundWord(FoundWord? foundWord)
  {
    if (foundWord is not null && !ChosenPositions.Value.ChosenPositions.SequenceEqual(foundWord.Path))
      Dispatcher.Dispatch(new SetPositionsAction(foundWord.Path, null));
    else
    {
      Dispatcher.Dispatch(new Step.ClearPositionsAction());
    }
  }

}
